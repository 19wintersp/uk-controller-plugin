name: Build

on:
  push:
    branches:
      - '**'
    tags:
      - '*'
  pull_request:

jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:       
      - name: Checkout Code
        uses: actions/checkout@v2

      # Environment things
      - name: Add Msbuild To PATH
        uses: microsoft/setup-msbuild@v1.0.2
        with:
         vs-version: '16.5'

      - name: Setup Boost Environment
        run: |
          echo "BOOST_ROOT=${env:BOOST_ROOT_1_72_0}\\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "BOOST_LIBRARYDIR=${env:BOOST_ROOT_1_72_0}\\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Cache OpenSSL
        id: cache-openssl
        uses: actions/cache@v2.1.3
        with:
          path: "C:\\Program Files (x86)\\OpenSSL-Win32"
          key: "ukcp-openssl"

      - name: Install OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: choco install openssl --forcex86 | out-null

      - name: Setup OpenSSL Environment
        run: |
          echo "OPENSSL_ROOT=C:\\Program Files (x86)\\OpenSSL-Win32\\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "OPENSSL_LIBRARYDIR=C:\\Program Files (x86)\\OpenSSL-Win32\\lib\\VC\\static" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Restore Nuget Packages
        run: |
          cd msvc
          nuget restore
          cd ..

      - name: Setup Build Version
        run: |
          $tagVersion = "${{ github.ref }}" -replace "refs/pull/",""
          $versionFile = ".\\src\update\\PluginVersion.cpp"
          echo (Get-Content $versionFile).replace("#VERSION_STRING#", "$tagVersion")
      
      # Run the build and tests
      - name: Run Build
        run: msbuild msvc/UKControllerPlugin.sln /verbosity:quiet /property:Configuration=Release -m

      - name: Run Tests
        run: ".\\bin\\Release\\UKControllerPluginTest.exe"

      # Run the linter
      - name: Install Cpplint
        run: pip install cpplint

      - name: Run Lint
        run: cpplint --quiet --recursive src/ test/
      
      # Upload artifacts
      - name: Upload Plugin DLL As Artifact
        uses: actions/upload-artifact@v2
        with:
          name: UKControllerPlugin.dll
          path: ".\\bin\\Release\\UKControllerPlugin.dll"

      # Create release if we're building a tag
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

      # Upload release asset to the release
      - name: Upload Plugin DLL As Release Asset
        uses: actions/upload-release-asset@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ".\\bin\\Release\\UKControllerPlugin.dll"
          asset_name: UKControllerPlugin.dll
          asset_content_type: application/octet-stream
